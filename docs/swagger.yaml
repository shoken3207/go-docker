consumes:
- application/json
definitions:
  auth.LoginRequest:
    properties:
      email:
        type: string
      password:
        maxLength: 50
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  auth.LoginResponse:
    properties:
      token:
        type: string
    type: object
  auth.RegisterRequest:
    properties:
      description:
        type: string
      name:
        maxLength: 100
        minLength: 3
        type: string
      password:
        maxLength: 50
        minLength: 6
        type: string
      profileImage:
        type: string
      token:
        type: string
      username:
        maxLength: 255
        minLength: 5
        type: string
    required:
    - name
    - password
    - token
    - username
    type: object
  auth.ResetPassRequest:
    properties:
      afterPassword:
        maxLength: 50
        minLength: 6
        type: string
      token:
        type: string
    required:
    - afterPassword
    - token
    type: object
  auth.UpdatePassRequestBody:
    properties:
      afterPassword:
        maxLength: 50
        minLength: 6
        type: string
      beforePassword:
        maxLength: 50
        minLength: 6
        type: string
    required:
    - afterPassword
    - beforePassword
    type: object
  expedition.CreateExpeditionRequest:
    properties:
      endDate:
        type: string
      games:
        items:
          $ref: '#/definitions/expedition.GameRequest'
        type: array
      images:
        items:
          $ref: '#/definitions/expedition.ExpeditionImageRequest'
        type: array
      isPublic:
        type: boolean
      memo:
        type: string
      payments:
        items:
          $ref: '#/definitions/expedition.PaymentRequest'
        type: array
      sportId:
        type: integer
      stadiumId:
        type: integer
      startDate:
        type: string
      title:
        type: string
      visitedFacilities:
        items:
          $ref: '#/definitions/expedition.VisitedFacilityRequest'
        type: array
    required:
    - endDate
    - games
    - isPublic
    - memo
    - payments
    - sportId
    - stadiumId
    - startDate
    - title
    - visitedFacilities
    type: object
  expedition.ExpeditionImageRequest:
    properties:
      fileId:
        type: string
      image:
        type: string
    required:
    - fileId
    - image
    type: object
  expedition.ExpeditionImageResponse:
    properties:
      fileId:
        type: string
      id:
        type: integer
      image:
        type: string
    type: object
  expedition.GameRequest:
    properties:
      comment:
        type: string
      date:
        type: string
      scores:
        items:
          $ref: '#/definitions/expedition.GameScoreRequest'
        type: array
      team1Id:
        type: integer
      team2Id:
        type: integer
    required:
    - comment
    - date
    - scores
    - team1Id
    - team2Id
    type: object
  expedition.GameResponse:
    properties:
      comment:
        type: string
      date:
        type: string
      id:
        type: integer
      scores:
        items:
          $ref: '#/definitions/expedition.GameScoreResponse'
        type: array
      team1Id:
        type: integer
      team2Id:
        type: integer
    type: object
  expedition.GameScoreRequest:
    properties:
      order:
        type: integer
      score:
        type: integer
      teamId:
        type: integer
    required:
    - order
    - score
    - teamId
    type: object
  expedition.GameScoreResponse:
    properties:
      id:
        type: integer
      order:
        type: integer
      score:
        type: integer
      teamId:
        type: integer
    type: object
  expedition.GetExpeditionDetailResponse:
    properties:
      endDate:
        type: string
      expeditionImages:
        items:
          $ref: '#/definitions/expedition.ExpeditionImageResponse'
        type: array
      games:
        items:
          $ref: '#/definitions/expedition.GameResponse'
        type: array
      id:
        type: integer
      isPublic:
        type: boolean
      memo:
        type: string
      payments:
        items:
          $ref: '#/definitions/expedition.PaymentResponse'
        type: array
      sportId:
        type: integer
      stadiumId:
        type: integer
      startDate:
        type: string
      title:
        type: string
      visitedFacilities:
        items:
          $ref: '#/definitions/expedition.VisitedFacilityResponse'
        type: array
    type: object
  expedition.PaymentRequest:
    properties:
      cost:
        type: integer
      date:
        type: string
      title:
        type: string
    required:
    - cost
    - date
    - title
    type: object
  expedition.PaymentResponse:
    properties:
      cost:
        type: integer
      date:
        type: string
      id:
        type: integer
      title:
        type: string
    type: object
  expedition.UpdateExpeditionImagesRequest:
    properties:
      add:
        items:
          $ref: '#/definitions/expedition.ExpeditionImageRequest'
        type: array
      delete:
        items:
          type: string
        type: array
    type: object
  expedition.UpdateExpeditionRequestBody:
    properties:
      endDate:
        type: string
      games:
        $ref: '#/definitions/expedition.UpdateGamesRequest'
      id:
        type: integer
      images:
        $ref: '#/definitions/expedition.UpdateExpeditionImagesRequest'
      isPublic:
        type: boolean
      memo:
        type: string
      payments:
        $ref: '#/definitions/expedition.UpdatePaymentsRequest'
      sportId:
        type: integer
      stadiumId:
        type: integer
      startDate:
        type: string
      title:
        type: string
      visitedFacilities:
        $ref: '#/definitions/expedition.UpdateVisitedFacilitiesRequest'
    required:
    - endDate
    - games
    - id
    - isPublic
    - memo
    - payments
    - sportId
    - stadiumId
    - startDate
    - title
    - visitedFacilities
    type: object
  expedition.UpdateGameRequest:
    properties:
      comment:
        type: string
      date:
        type: string
      id:
        type: integer
      scores:
        $ref: '#/definitions/expedition.UpdateGameScoresRequest'
      team1Id:
        type: integer
      team2Id:
        type: integer
    required:
    - comment
    - date
    - id
    - scores
    - team1Id
    - team2Id
    type: object
  expedition.UpdateGameScoreRequest:
    properties:
      id:
        type: integer
      order:
        type: integer
      score:
        type: integer
      teamId:
        type: integer
    required:
    - id
    - order
    - score
    - teamId
    type: object
  expedition.UpdateGameScoresRequest:
    properties:
      add:
        items:
          $ref: '#/definitions/expedition.GameScoreRequest'
        type: array
      delete:
        items:
          type: integer
        type: array
      update:
        items:
          $ref: '#/definitions/expedition.UpdateGameScoreRequest'
        type: array
    type: object
  expedition.UpdateGamesRequest:
    properties:
      add:
        items:
          $ref: '#/definitions/expedition.GameRequest'
        type: array
      delete:
        items:
          type: integer
        type: array
      update:
        items:
          $ref: '#/definitions/expedition.UpdateGameRequest'
        type: array
    type: object
  expedition.UpdatePaymentRequest:
    properties:
      cost:
        type: integer
      date:
        type: string
      id:
        type: integer
      title:
        type: string
    required:
    - cost
    - date
    - id
    - title
    type: object
  expedition.UpdatePaymentsRequest:
    properties:
      add:
        items:
          $ref: '#/definitions/expedition.PaymentRequest'
        type: array
      delete:
        items:
          type: integer
        type: array
      update:
        items:
          $ref: '#/definitions/expedition.UpdatePaymentRequest'
        type: array
    type: object
  expedition.UpdateVisitedFacilitiesRequest:
    properties:
      add:
        items:
          $ref: '#/definitions/expedition.VisitedFacilityRequest'
        type: array
      delete:
        items:
          type: integer
        type: array
      update:
        items:
          $ref: '#/definitions/expedition.UpdateVisitedFacilityRequest'
        type: array
    type: object
  expedition.UpdateVisitedFacilityRequest:
    properties:
      address:
        type: string
      color:
        type: string
      icon:
        type: string
      id:
        type: integer
      latitude:
        type: number
      longitude:
        type: number
      name:
        type: string
    required:
    - address
    - color
    - icon
    - id
    - latitude
    - longitude
    - name
    type: object
  expedition.VisitedFacilityRequest:
    properties:
      address:
        type: string
      color:
        type: string
      icon:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      name:
        type: string
    required:
    - address
    - color
    - icon
    - latitude
    - longitude
    - name
    type: object
  expedition.VisitedFacilityResponse:
    properties:
      address:
        type: string
      color:
        type: string
      icon:
        type: string
      id:
        type: integer
      latitude:
        type: number
      longitude:
        type: number
      name:
        type: string
    type: object
  upload.UploadImagesResponse:
    properties:
      images:
        items:
          $ref: '#/definitions/upload.UploadToImageKitResponse'
        type: array
    type: object
  upload.UploadToImageKitResponse:
    properties:
      fileId:
        type: string
      url:
        type: string
    type: object
  user.IsUniqueUsernameResponse:
    properties:
      isUnique:
        type: boolean
    type: object
  user.UpdateUserRequestBody:
    properties:
      description:
        type: string
      name:
        type: string
      profileImage:
        type: string
    required:
    - description
    - name
    - profileImage
    type: object
  user.UserResponse:
    properties:
      description:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      profileImage:
        type: string
      username:
        type: string
    type: object
  utils.ApiResponse-auth_LoginResponse:
    properties:
      data:
        $ref: '#/definitions/auth.LoginResponse'
      message:
        type: string
      success:
        type: boolean
    type: object
  utils.ApiResponse-expedition_GetExpeditionDetailResponse:
    properties:
      data:
        $ref: '#/definitions/expedition.GetExpeditionDetailResponse'
      message:
        type: string
      success:
        type: boolean
    type: object
  utils.ApiResponse-upload_UploadImagesResponse:
    properties:
      data:
        $ref: '#/definitions/upload.UploadImagesResponse'
      message:
        type: string
      success:
        type: boolean
    type: object
  utils.ApiResponse-user_IsUniqueUsernameResponse:
    properties:
      data:
        $ref: '#/definitions/user.IsUniqueUsernameResponse'
      message:
        type: string
      success:
        type: boolean
    type: object
  utils.ApiResponse-user_UserResponse:
    properties:
      data:
        $ref: '#/definitions/user.UserResponse'
      message:
        type: string
      success:
        type: boolean
    type: object
  utils.BasicResponse:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
info:
  contact: {}
  description: このapiは、ビジターゴーのAPIで、ユーザー、スタジアム、遠征記録、などについて扱います。
  title: ビジターゴーAPI
  version: "1.0"
paths:
  /api/auth/emailVerification/{email}:
    get:
      description: リクエストからメールアドレス取得後、tokenTypeに応じてチェックし、メールアドレス宛にtokenを含めた画面URLをメールで送信
      parameters:
      - description: メールアドレス
        in: query
        name: email
        required: true
        type: string
      - description: トークンタイプ register or reset
        in: query
        name: tokenType
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.BasicResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
      summary: メールアドレスの本人確認
      tags:
      - auth
  /api/auth/login:
    post:
      description: メールアドレスとパスワードが合致したら、jwtトークンをクライアントに返却
      parameters:
      - description: ログイン情報
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.ApiResponse-auth_LoginResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
        "404":
          description: not foundエラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
      summary: ログイン
      tags:
      - auth
  /api/auth/register:
    post:
      description: メールアドレス確認後にリクエスト内容をユーザーテーブルに保存
      parameters:
      - description: ユーザー情報
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterRequest'
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.BasicResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
      summary: ユーザー登録
      tags:
      - auth
  /api/auth/resetPass:
    put:
      description: メール内リンクで本人確認後、トークンと新しいパスワードをリクエストで取得し、パスワードを更新する
      parameters:
      - description: tokenと新しいパスワード
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.ResetPassRequest'
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.BasicResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
        "404":
          description: not foundエラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
      summary: ログアウト状態からパスワードを変更
      tags:
      - auth
  /api/auth/updatePass/{userId}:
    put:
      description: 現在のパスワードと新しいパスワードをリクエストで取得し、現在のパスワードが合致したら、新しいパスワードに更新する
      parameters:
      - description: userId
        in: path
        name: userId
        required: true
        type: integer
      - description: メールアドレス
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.UpdatePassRequestBody'
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.BasicResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
        "401":
          description: 認証エラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
        "404":
          description: not foundエラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
      security:
      - BearerAuth: []
      summary: ログイン状態からパスワードを変更
      tags:
      - auth
  /api/expedition/{expeditionId}:
    get:
      description: 遠征記録詳細情報を取得
      parameters:
      - description: expeditionId
        in: path
        name: expeditionId
        required: true
        type: integer
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.ApiResponse-expedition_GetExpeditionDetailResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
        "403":
          description: 認証エラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
        "404":
          description: not foundエラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
      security:
      - BearerAuth: []
      summary: idから遠征記録詳細を取得
      tags:
      - expedition
  /api/expedition/create:
    post:
      description: 遠征、出費、試合、訪れた施設の情報を保存する。
      parameters:
      - description: 遠征記録作成リクエスト
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/expedition.CreateExpeditionRequest'
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.BasicResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
        "403":
          description: 認証エラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
      security:
      - BearerAuth: []
      summary: 遠征記録を作成
      tags:
      - expedition
  /api/expedition/delete/{id}:
    delete:
      description: pathのidをもとに遠征記録を削除する。
      responses:
        "200":
          description: アップロードした画像のURL
          schema:
            $ref: '#/definitions/utils.BasicResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
        "403":
          description: ユーザーが見つかりません
          schema:
            $ref: '#/definitions/utils.BasicResponse'
        "404":
          description: ユーザーが見つかりません
          schema:
            $ref: '#/definitions/utils.BasicResponse'
        "500":
          description: ユーザーが見つかりません
          schema:
            $ref: '#/definitions/utils.BasicResponse'
      security:
      - BearerAuth: []
      summary: 遠征記録を削除
      tags:
      - expedition
  /api/expedition/update/{id}:
    put:
      description: 遠征、出費、試合、訪れた施設の情報を更新する。<br>Payment, VisitedFacility, Game, GameScoreのdeleteにはidの配列ですが、ExpeditionImageのdeleteにはfileId(string)の配列をリクエストで渡してください
      parameters:
      - description: 遠征記録更新リクエスト
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/expedition.UpdateExpeditionRequestBody'
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.BasicResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
        "403":
          description: 認証エラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
        "404":
          description: ユーザーが見つかりません
          schema:
            $ref: '#/definitions/utils.BasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
      security:
      - BearerAuth: []
      summary: 遠征記録を更新
      tags:
      - expedition
  /api/sample/helloWorld:
    get:
      responses: {}
      summary: サンプルAPI
      tags:
      - sample
  /api/sample/protectedHelloWorld:
    get:
      responses: {}
      security:
      - BearerAuth: []
      summary: サンプルAPI
      tags:
      - sample
  /api/upload/images:
    post:
      consumes:
      - multipart/form-data
      description: 画像をアップロードし、URLを返します。<br>プロフィール、スタジアム、遠征など、格納フォルダを指定してください。<br>画像は1枚から10枚アップロードできるが、Swagger
        UIでは1つしか選択できません。<br>ファイルの拡張子は、[".jpg", ".jpeg", ".png"]だけを受け付けています。ファイルサイズは最大5MBを上限としています。
      parameters:
      - description: 格納フォルダ
        in: query
        name: folder
        required: true
        type: string
      - description: 画像ファイル
        in: formData
        name: images
        required: true
        type: file
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.ApiResponse-upload_UploadImagesResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
        "401":
          description: 認証エラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
        "404":
          description: not foundエラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
      security:
      - BearerAuth: []
      summary: 画像をクラウドストレージ(imagekit)にアップロード
      tags:
      - upload
  /api/user/isUnique/{username}:
    get:
      description: リクエストと同じuserNameが登録済みかチェックする
      parameters:
      - description: username
        in: path
        name: username
        required: true
        type: string
      responses:
        "200":
          description: 一意かのフラグ
          schema:
            $ref: '#/definitions/utils.ApiResponse-user_IsUniqueUsernameResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
      summary: ユーザーネームの重複チェック
      tags:
      - user
  /api/user/logined:
    get:
      description: ヘッダーのトークンからユーザーを取得する
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.ApiResponse-user_UserResponse'
        "401":
          description: 認証エラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
        "404":
          description: not foundエラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
      security:
      - BearerAuth: []
      summary: ログイン済みの場合、ログインユーザーの情報を取得
      tags:
      - user
  /api/user/update/{userId}:
    put:
      description: userIdが同じユーザーの情報を変更する
      parameters:
      - description: userId
        in: path
        name: userId
        required: true
        type: integer
      - description: userId
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.UpdateUserRequestBody'
      responses:
        "200":
          description: ユーザー情報
          schema:
            $ref: '#/definitions/utils.ApiResponse-user_UserResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
        "401":
          description: 認証エラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
        "404":
          description: not foundエラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
      security:
      - BearerAuth: []
      summary: ユーザー情報変更
      tags:
      - user
  /api/user/userId/{userId}:
    get:
      description: userIdからユーザーを1人取得
      parameters:
      - description: userId
        in: path
        name: userId
        required: true
        type: integer
      responses:
        "200":
          description: ユーザー情報
          schema:
            $ref: '#/definitions/utils.ApiResponse-user_UserResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
        "401":
          description: 認証エラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
        "404":
          description: not foundエラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
      security:
      - BearerAuth: []
      summary: userIdからユーザー情報取得
      tags:
      - user
  /api/user/username/{username}:
    get:
      description: usernameからユーザーを1人取得
      parameters:
      - description: username
        in: path
        name: username
        required: true
        type: string
      responses:
        "200":
          description: ユーザー情報
          schema:
            $ref: '#/definitions/utils.ApiResponse-user_UserResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
        "401":
          description: 認証エラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
        "404":
          description: not foundエラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.BasicResponse'
      security:
      - BearerAuth: []
      summary: usernameからユーザー情報取得
      tags:
      - user
produces:
- application/json
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
