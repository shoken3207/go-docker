consumes:
- application/json
definitions:
  adminTool.IdRequest:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  adminTool.LeagueAddRequest:
    properties:
      name:
        type: string
      sport_id:
        type: integer
    required:
    - sport_id
    type: object
  adminTool.LeagueUpdateRequest:
    properties:
      id:
        type: integer
      name:
        type: string
      sport_id:
        type: integer
    required:
    - id
    - sport_id
    type: object
  adminTool.Sports:
    properties:
      id:
        type: integer
      name:
        type: string
    required:
    - id
    - name
    type: object
  adminTool.SportsAddRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  adminTool.SportsUpdateRequest:
    properties:
      id:
        type: integer
      name:
        type: string
    required:
    - id
    - name
    type: object
  adminTool.StadiumAddRequest:
    properties:
      address:
        type: string
      capacity:
        type: integer
      description:
        type: string
      fileId:
        type: string
      image:
        type: string
      name:
        type: string
    required:
    - address
    - capacity
    - description
    - fileId
    - image
    - name
    type: object
  adminTool.StadiumUpdateRequest:
    properties:
      address:
        type: string
      capacity:
        type: integer
      description:
        type: string
      fileId:
        type: string
      id:
        type: integer
      image:
        type: string
      name:
        type: string
    required:
    - address
    - capacity
    - description
    - fileId
    - id
    - image
    - name
    type: object
  adminTool.TeamAddRequest:
    properties:
      LeagueId:
        type: integer
      name:
        type: string
      sportsId:
        type: integer
      stadiumId:
        type: integer
    required:
    - LeagueId
    - name
    - sportsId
    - stadiumId
    type: object
  adminTool.TeamUpdateRequest:
    properties:
      LeagueId:
        type: integer
      name:
        type: string
      sportsId:
        type: integer
      stadiumId:
        type: integer
      teamId:
        type: integer
    required:
    - LeagueId
    - name
    - sportsId
    - stadiumId
    - teamId
    type: object
  auth.LoginRequest:
    properties:
      email:
        example: tanaka@example.com
        type: string
      password:
        example: password123
        maxLength: 50
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  auth.LoginResponse:
    properties:
      token:
        example: "1234567890"
        type: string
    type: object
  auth.RegisterRequest:
    properties:
      description:
        example: 野球が好きです！
        type: string
      favoriteTeamIds:
        example:
        - 1
        items:
          type: integer
        type: array
      name:
        example: tanaka taro
        maxLength: 100
        minLength: 1
        type: string
      password:
        example: password123
        maxLength: 50
        minLength: 6
        type: string
      profileImage:
        example: https://ik.imagekit.io/your_imagekit_id/image.jpg
        type: string
      token:
        example: "1234567890"
        type: string
      username:
        example: user123
        maxLength: 255
        minLength: 1
        type: string
    required:
    - name
    - password
    - token
    - username
    type: object
  auth.ResetPassRequest:
    properties:
      afterPassword:
        example: password456
        maxLength: 50
        minLength: 6
        type: string
      token:
        example: "1234567890"
        type: string
    required:
    - afterPassword
    - token
    type: object
  auth.UpdatePassRequestBody:
    properties:
      afterPassword:
        example: password456
        maxLength: 50
        minLength: 6
        type: string
      beforePassword:
        example: password123
        maxLength: 50
        minLength: 6
        type: string
    required:
    - afterPassword
    - beforePassword
    type: object
  expedition.CreateExpeditionRequest:
    properties:
      endDate:
        example: "2025-01-01T00:00:00Z"
        type: string
      games:
        items:
          $ref: '#/definitions/expedition.GameRequest'
        type: array
      imageUrls:
        items:
          type: string
        type: array
      isPublic:
        example: true
        type: boolean
      memo:
        example: 初めてのスタジアム訪問。とても楽しかった！
        type: string
      payments:
        items:
          $ref: '#/definitions/expedition.PaymentRequest'
        type: array
      sportId:
        example: 1
        type: integer
      stadiumId:
        example: 1
        type: integer
      startDate:
        example: "2025-01-01T00:00:00Z"
        type: string
      title:
        example: 野球観戦の遠征記録
        type: string
      visitedFacilities:
        items:
          $ref: '#/definitions/expedition.VisitedFacilityRequest'
        type: array
    required:
    - endDate
    - games
    - imageUrls
    - isPublic
    - memo
    - payments
    - sportId
    - stadiumId
    - startDate
    - title
    - visitedFacilities
    type: object
  expedition.ExpeditionImageResponse:
    properties:
      fileId:
        example: file_1234567890
        type: string
      id:
        example: 1
        type: integer
      image:
        example: https://ik.imagekit.io/your_imagekit_id/image.jpg
        type: string
    type: object
  expedition.ExpeditionListResponse:
    properties:
      endDate:
        example: "2025-01-01T00:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      images:
        example:
        - https://ik.imagekit.io/your_imagekit_id/image.jpg
        items:
          type: string
        type: array
      isLiked:
        example: true
        type: boolean
      likesCount:
        example: 10
        type: integer
      sportId:
        example: 1
        type: integer
      sportName:
        example: 野球
        type: string
      stadiumId:
        example: 1
        type: integer
      stadiumName:
        example: 東京ドーム
        type: string
      startDate:
        example: "2025-01-01T00:00:00Z"
        type: string
      team1Name:
        example: ヤクルト
        type: string
      team2Name:
        example: ソフトバンク
        type: string
      title:
        example: 野球観戦の遠征記録
        type: string
      userIcon:
        example: https://ik.imagekit.io/your_imagekit_id/image.jpg
        type: string
      userId:
        example: 1
        type: integer
      userName:
        example: user123
        type: string
    type: object
  expedition.GameRequest:
    properties:
      date:
        example: "2025-01-01T00:00:00Z"
        type: string
      scores:
        items:
          $ref: '#/definitions/expedition.GameScoreRequest'
        type: array
      team1Id:
        example: 1
        type: integer
      team2Id:
        example: 2
        type: integer
    required:
    - date
    - scores
    - team1Id
    - team2Id
    type: object
  expedition.GameResponse:
    properties:
      date:
        example: "2025-01-01T00:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      scores:
        items:
          $ref: '#/definitions/expedition.GameScoreResponse'
        type: array
      team1Id:
        example: 1
        type: integer
      team1Name:
        example: ヤクルト
        type: string
      team2Id:
        example: 2
        type: integer
      team2Name:
        example: ソフトバンク
        type: string
    type: object
  expedition.GameScoreRequest:
    properties:
      order:
        example: 1
        type: integer
      score:
        example: 1
        type: integer
      teamId:
        example: 1
        type: integer
    required:
    - order
    - score
    - teamId
    type: object
  expedition.GameScoreResponse:
    properties:
      id:
        example: 1
        type: integer
      order:
        example: 1
        type: integer
      score:
        example: 1
        type: integer
      teamId:
        example: 1
        type: integer
      teamName:
        example: ヤクルト
        type: string
    type: object
  expedition.GetExpeditionDetailResponse:
    properties:
      endDate:
        example: "2025-01-01T00:00:00Z"
        type: string
      expeditionImages:
        items:
          $ref: '#/definitions/expedition.ExpeditionImageResponse'
        type: array
      games:
        items:
          $ref: '#/definitions/expedition.GameResponse'
        type: array
      id:
        example: 1
        type: integer
      isPublic:
        example: true
        type: boolean
      likesCount:
        example: 10
        type: integer
      memo:
        example: 初めてのスタジアム訪問。とても楽しかった！
        type: string
      payments:
        items:
          $ref: '#/definitions/expedition.PaymentResponse'
        type: array
      sportId:
        example: 1
        type: integer
      sportName:
        example: 野球
        type: string
      stadiumId:
        example: 1
        type: integer
      stadiumName:
        example: 東京ドーム
        type: string
      startDate:
        example: "2025-01-01T00:00:00Z"
        type: string
      title:
        example: 野球観戦の遠征記録
        type: string
      userIcon:
        example: https://ik.imagekit.io/your_imagekit_id/image.jpg
        type: string
      userId:
        example: 1
        type: integer
      username:
        example: user123
        type: string
      visitedFacilities:
        items:
          $ref: '#/definitions/expedition.VisitedFacilityResponse'
        type: array
    type: object
  expedition.LikeExpeditionResponse:
    properties:
      isLiked:
        example: true
        type: boolean
      likesCount:
        example: 10
        type: integer
    type: object
  expedition.PaymentRequest:
    properties:
      cost:
        example: 5000
        type: integer
      date:
        example: "2025-01-01T00:00:00Z"
        type: string
      title:
        example: チケット代
        type: string
    required:
    - cost
    - date
    - title
    type: object
  expedition.PaymentResponse:
    properties:
      cost:
        example: 5000
        type: integer
      date:
        example: "2025-01-01T00:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      title:
        example: チケット代
        type: string
    type: object
  expedition.UpdateExpeditionImagesRequest:
    properties:
      add:
        items:
          type: string
        type: array
      delete:
        items:
          type: string
        type: array
    type: object
  expedition.UpdateExpeditionRequestBody:
    properties:
      endDate:
        example: "2025-01-01T00:00:00Z"
        type: string
      games:
        $ref: '#/definitions/expedition.UpdateGamesRequest'
      images:
        $ref: '#/definitions/expedition.UpdateExpeditionImagesRequest'
      isPublic:
        example: true
        type: boolean
      memo:
        example: 初めてのスタジアム訪問。とても楽しかった！
        type: string
      payments:
        $ref: '#/definitions/expedition.UpdatePaymentsRequest'
      sportId:
        example: 1
        type: integer
      stadiumId:
        example: 1
        type: integer
      startDate:
        example: "2025-01-01T00:00:00Z"
        type: string
      title:
        example: 野球観戦の遠征記録
        type: string
      visitedFacilities:
        $ref: '#/definitions/expedition.UpdateVisitedFacilitiesRequest'
    required:
    - endDate
    - games
    - images
    - memo
    - payments
    - sportId
    - stadiumId
    - startDate
    - title
    - visitedFacilities
    type: object
  expedition.UpdateGameRequest:
    properties:
      date:
        example: "2025-01-01T00:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      scores:
        $ref: '#/definitions/expedition.UpdateGameScoresRequest'
      team1Id:
        example: 1
        type: integer
      team2Id:
        example: 2
        type: integer
    required:
    - date
    - id
    - scores
    - team1Id
    - team2Id
    type: object
  expedition.UpdateGameScoreRequest:
    properties:
      id:
        example: 1
        type: integer
      order:
        example: 1
        type: integer
      score:
        example: 1
        type: integer
      teamId:
        example: 1
        type: integer
    required:
    - id
    - order
    - score
    - teamId
    type: object
  expedition.UpdateGameScoresRequest:
    properties:
      add:
        items:
          $ref: '#/definitions/expedition.GameScoreRequest'
        type: array
      delete:
        items:
          type: integer
        type: array
      update:
        items:
          $ref: '#/definitions/expedition.UpdateGameScoreRequest'
        type: array
    type: object
  expedition.UpdateGamesRequest:
    properties:
      add:
        items:
          $ref: '#/definitions/expedition.GameRequest'
        type: array
      delete:
        items:
          type: integer
        type: array
      update:
        items:
          $ref: '#/definitions/expedition.UpdateGameRequest'
        type: array
    type: object
  expedition.UpdatePaymentRequest:
    properties:
      cost:
        example: 5000
        type: integer
      date:
        example: "2025-01-01T00:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      title:
        example: チケット代
        type: string
    required:
    - cost
    - date
    - id
    - title
    type: object
  expedition.UpdatePaymentsRequest:
    properties:
      add:
        items:
          $ref: '#/definitions/expedition.PaymentRequest'
        type: array
      delete:
        items:
          type: integer
        type: array
      update:
        items:
          $ref: '#/definitions/expedition.UpdatePaymentRequest'
        type: array
    type: object
  expedition.UpdateVisitedFacilitiesRequest:
    properties:
      add:
        items:
          $ref: '#/definitions/expedition.VisitedFacilityRequest'
        type: array
      delete:
        items:
          type: integer
        type: array
      update:
        items:
          $ref: '#/definitions/expedition.UpdateVisitedFacilityRequest'
        type: array
    type: object
  expedition.UpdateVisitedFacilityRequest:
    properties:
      address:
        example: 東京都千代田区丸の内1-1-1
        type: string
      color:
        example: '#00FF00'
        type: string
      customName:
        example: 東京駅(おみやげ)
        type: string
      icon:
        example: train
        type: string
      id:
        example: 1
        type: integer
      latitude:
        example: 35.6812
        type: number
      longitude:
        example: 139.7671
        type: number
      name:
        example: 東京駅
        type: string
    required:
    - address
    - color
    - customName
    - icon
    - id
    - latitude
    - longitude
    - name
    type: object
  expedition.VisitedFacilityRequest:
    properties:
      address:
        example: 東京都千代田区丸の内1-1-1
        type: string
      color:
        example: '#00FF00'
        type: string
      customName:
        example: 東京駅(おみやげ)
        type: string
      icon:
        example: train
        type: string
      latitude:
        example: 35.6812
        type: number
      longitude:
        example: 139.7671
        type: number
      name:
        example: 東京駅
        type: string
    required:
    - address
    - color
    - customName
    - icon
    - latitude
    - longitude
    - name
    type: object
  expedition.VisitedFacilityResponse:
    properties:
      address:
        example: 東京都千代田区丸の内1-1-1
        type: string
      color:
        example: '#00FF00'
        type: string
      customName:
        example: 東京駅（おみやげ）
        type: string
      icon:
        example: train
        type: string
      id:
        example: 1
        type: integer
      latitude:
        example: 35.6812
        type: number
      longitude:
        example: 139.7671
        type: number
      name:
        example: 東京駅
        type: string
    type: object
  stadium.FacilityResponse:
    properties:
      address:
        example: 東京都千代田区丸の内1-1-1
        type: string
      name:
        example: 東京駅
        type: string
      visitCount:
        example: 1
        type: integer
    type: object
  stadium.GetStadiumResponse:
    properties:
      address:
        example: 大阪府大阪市西区千代崎3-1-1
        type: string
      capacity:
        example: 36000
        type: integer
      description:
        example: オリックス・バファローズのホーム球場
        type: string
      expeditions:
        items:
          $ref: '#/definitions/expedition.ExpeditionListResponse'
        type: array
      facilities:
        items:
          $ref: '#/definitions/stadium.FacilityResponse'
        type: array
      id:
        example: 1
        type: integer
      image:
        example: https://ik.imagekit.io/your_imagekit_id/image.jpg
        type: string
      name:
        example: 京セラドーム
        type: string
    type: object
  team.LeagueResponse:
    properties:
      league:
        example: J1リーグ
        type: string
      teams:
        items:
          $ref: '#/definitions/team.TeamResponse'
        type: array
    type: object
  team.SportResponse:
    properties:
      icon:
        example: soccer
        type: string
      sports:
        example: サッカー
        type: string
      team:
        items:
          $ref: '#/definitions/team.LeagueResponse'
        type: array
    type: object
  team.TeamResponse:
    properties:
      id:
        example: 1
        type: integer
      isFavorite:
        example: true
        type: boolean
      name:
        example: ＦＣ東京
        type: string
    type: object
  upload.UploadImagesResponse:
    properties:
      imageUrls:
        items:
          type: string
        type: array
    type: object
  user.IsUniqueUsernameResponse:
    properties:
      isUnique:
        example: true
        type: boolean
      message:
        example: 使用できます
        type: string
    type: object
  user.UpdateFavoriteTeamsRequest:
    properties:
      add:
        example:
        - 1
        items:
          type: integer
        type: array
      delete:
        example:
        - 1
        items:
          type: integer
        type: array
    type: object
  user.UpdateUserRequestBody:
    properties:
      description:
        example: 野球が好きです！
        type: string
      favoriteTeams:
        $ref: '#/definitions/user.UpdateFavoriteTeamsRequest'
      name:
        example: tanaka taro
        type: string
      profileImage:
        example: https://ik.imagekit.io/your_imagekit_id/image.jpg
        type: string
      username:
        example: user123
        maxLength: 255
        minLength: 1
        type: string
    required:
    - description
    - name
    - profileImage
    - username
    type: object
  user.UserResponse:
    properties:
      description:
        example: 野球が好きです！
        type: string
      email:
        example: tanaka@example.com
        type: string
      fileId:
        example: "1234567890"
        type: string
      id:
        example: 1
        type: integer
      name:
        example: tanaka taro
        type: string
      profileImage:
        example: https://ik.imagekit.io/your_imagekit_id/image.jpg
        type: string
      username:
        example: user123
        type: string
    type: object
  utils.ApiResponse-adminTool_Sports:
    properties:
      data:
        $ref: '#/definitions/adminTool.Sports'
      message:
        example: 成功しました！！
        type: string
      success:
        example: true
        type: boolean
    type: object
  utils.ApiResponse-array_expedition_ExpeditionListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/expedition.ExpeditionListResponse'
        type: array
      message:
        example: 成功しました！！
        type: string
      success:
        example: true
        type: boolean
    type: object
  utils.ApiResponse-array_team_SportResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/team.SportResponse'
        type: array
      message:
        example: 成功しました！！
        type: string
      success:
        example: true
        type: boolean
    type: object
  utils.ApiResponse-auth_LoginResponse:
    properties:
      data:
        $ref: '#/definitions/auth.LoginResponse'
      message:
        example: 成功しました！！
        type: string
      success:
        example: true
        type: boolean
    type: object
  utils.ApiResponse-expedition_GetExpeditionDetailResponse:
    properties:
      data:
        $ref: '#/definitions/expedition.GetExpeditionDetailResponse'
      message:
        example: 成功しました！！
        type: string
      success:
        example: true
        type: boolean
    type: object
  utils.ApiResponse-expedition_LikeExpeditionResponse:
    properties:
      data:
        $ref: '#/definitions/expedition.LikeExpeditionResponse'
      message:
        example: 成功しました！！
        type: string
      success:
        example: true
        type: boolean
    type: object
  utils.ApiResponse-stadium_GetStadiumResponse:
    properties:
      data:
        $ref: '#/definitions/stadium.GetStadiumResponse'
      message:
        example: 成功しました！！
        type: string
      success:
        example: true
        type: boolean
    type: object
  utils.ApiResponse-upload_UploadImagesResponse:
    properties:
      data:
        $ref: '#/definitions/upload.UploadImagesResponse'
      message:
        example: 成功しました！！
        type: string
      success:
        example: true
        type: boolean
    type: object
  utils.ApiResponse-user_IsUniqueUsernameResponse:
    properties:
      data:
        $ref: '#/definitions/user.IsUniqueUsernameResponse'
      message:
        example: 成功しました！！
        type: string
      success:
        example: true
        type: boolean
    type: object
  utils.ApiResponse-user_UserResponse:
    properties:
      data:
        $ref: '#/definitions/user.UserResponse'
      message:
        example: 成功しました！！
        type: string
      success:
        example: true
        type: boolean
    type: object
  utils.ErrorBasicResponse:
    properties:
      message:
        example: エラーメッセージ
        type: string
      success:
        example: false
        type: boolean
    type: object
  utils.SuccessBasicResponse:
    properties:
      message:
        example: 成功しました！！
        type: string
      success:
        example: true
        type: boolean
    type: object
info:
  contact: {}
  description: このapiは、ビジターゴーのAPIで、ユーザー、スタジアム、遠征記録、などについて扱います。
  title: ビジターゴーAPI
  version: "1.0"
paths:
  /api/admin/league/delete:
    delete:
      description: リクエストボディに削除対象のIDを指定してリーグ情報を削除します
      parameters:
      - description: リーグID
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/adminTool.IdRequest'
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.SuccessBasicResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
      security:
      - BearerAuth: []
      summary: リーグ削除
      tags:
      - adminLeague
  /api/admin/league/leagueAdd:
    post:
      description: リクエストからリーグ情報を取得後、重複確認を行い登録する。
      parameters:
      - description: リーグ情報
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/adminTool.LeagueAddRequest'
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.SuccessBasicResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
      security:
      - BearerAuth: []
      summary: リーグの追加
      tags:
      - adminLeague
  /api/admin/league/leagues:
    get:
      description: リーグ情報のレコードを全件取得して、一覧として表示する。
      parameters:
      - description: キーワード
        in: query
        name: keyword
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.SuccessBasicResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
      summary: リーグ全件検索
      tags:
      - adminLeague
  /api/admin/league/update:
    put:
      description: リクエストボディに更新対象のIDを指定してリーグ情報を更新します
      parameters:
      - description: リーグ情報
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/adminTool.LeagueUpdateRequest'
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.SuccessBasicResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
      security:
      - BearerAuth: []
      summary: リーグ更新
      tags:
      - adminLeague
  /api/admin/sports/delete/{id}:
    delete:
      description: リクエストボディに削除対象のIDを指定してスポーツ情報を削除します
      parameters:
      - description: スポーツID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.SuccessBasicResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
      security:
      - BearerAuth: []
      summary: スポーツ削除
      tags:
      - adminSports
  /api/admin/sports/idSports/{id}:
    get:
      description: idからスポーツ情報のレコードを取得して表示する。
      parameters:
      - description: スポーツID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.ApiResponse-adminTool_Sports'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
      summary: スポーツid検索
      tags:
      - adminSports
  /api/admin/sports/sports:
    get:
      description: スポーツ情報のレコードを全件取得して、一覧として表示する。
      parameters:
      - description: キーワード
        in: query
        name: keyword
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.SuccessBasicResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
      summary: スポーツ全件検索
      tags:
      - adminSports
  /api/admin/sports/sportsAdd:
    post:
      description: リクエストからスポーツ情報を取得後、重複確認を行い登録する。
      parameters:
      - description: スポーツ情報
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/adminTool.SportsAddRequest'
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.SuccessBasicResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
      security:
      - BearerAuth: []
      summary: スポーツの追加
      tags:
      - adminSports
  /api/admin/sports/update:
    put:
      description: リクエストボディに更新対象のIDを指定してスポーツ情報を更新します
      parameters:
      - description: スポーツ情報
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/adminTool.SportsUpdateRequest'
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.SuccessBasicResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
      security:
      - BearerAuth: []
      summary: スポーツ更新
      tags:
      - adminSports
  /api/admin/stadium/delete:
    delete:
      description: リクエストボディに削除対象のIDを指定してスタジアムを削除します
      parameters:
      - description: スタジアムID
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/adminTool.IdRequest'
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.SuccessBasicResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
      security:
      - BearerAuth: []
      summary: スタジアム削除
      tags:
      - adminStadium
  /api/admin/stadium/stadiumAdd:
    post:
      description: リクエストからスタジアム情報を追加後、重複確認を行い登録する。
      parameters:
      - description: スタジアム情報
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/adminTool.StadiumAddRequest'
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.SuccessBasicResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
      security:
      - BearerAuth: []
      summary: スタジアム追加
      tags:
      - adminStadium
  /api/admin/stadium/stadiums:
    get:
      description: スタジアム情報のレコードを全件取得して、一覧として表示する。
      parameters:
      - description: キーワード
        in: query
        name: keyword
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.SuccessBasicResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
      summary: スタジアム全件検索
      tags:
      - adminStadium
  /api/admin/stadium/update:
    put:
      description: リクエストボディに更新対象のIDを指定してスタジアムを更新します
      parameters:
      - description: スタジアム情報
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/adminTool.StadiumUpdateRequest'
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.SuccessBasicResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
      security:
      - BearerAuth: []
      summary: スタジアム更新
      tags:
      - adminStadium
  /api/admin/team/delete:
    delete:
      description: リクエストボディに削除対象のIDを指定してチーム情報を削除します
      parameters:
      - description: チームID
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/adminTool.IdRequest'
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.SuccessBasicResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
      security:
      - BearerAuth: []
      summary: チーム削除
      tags:
      - adminTeam
  /api/admin/team/teamAdd:
    post:
      description: リクエストからチーム情報を取得後、重複確認を行い登録する。
      parameters:
      - description: チーム情報
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/adminTool.TeamAddRequest'
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.SuccessBasicResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
      security:
      - BearerAuth: []
      summary: チームの追加
      tags:
      - adminTeam
  /api/admin/team/teams:
    get:
      description: チーム情報のレコードを全件取得して、一覧として表示する。
      parameters:
      - description: キーワード
        in: query
        name: keyword
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.SuccessBasicResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
      summary: チーム全件検索
      tags:
      - adminTeam
  /api/admin/team/update:
    put:
      description: リクエストボディに更新対象のIDを指定してチーム情報を更新します
      parameters:
      - description: チーム情報
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/adminTool.TeamUpdateRequest'
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.SuccessBasicResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
      security:
      - BearerAuth: []
      summary: チーム情報更新
      tags:
      - adminTeam
  /api/auth/emailVerification:
    get:
      description: リクエストからメールアドレス取得後、tokenTypeに応じてチェックし、メールアドレス宛にtokenを含めた画面URLをメールで送信<br>ユーザー登録、パスワードリセット時に使います。<br>
      parameters:
      - description: メールアドレス
        in: query
        name: email
        required: true
        type: string
      - description: トークンタイプ register or reset
        in: query
        name: tokenType
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.SuccessBasicResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
      summary: メールアドレスの本人確認
      tags:
      - auth
  /api/auth/login:
    post:
      description: メールアドレスとパスワードが合致したら、jwtトークンをクライアントに返却
      parameters:
      - description: ログイン情報
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.ApiResponse-auth_LoginResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "404":
          description: not foundエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
      summary: ログイン
      tags:
      - auth
  /api/auth/register:
    post:
      description: メール内リンクから遷移できる本登録用画面からリクエスト内容を取得し、ユーザーテーブルに保存
      parameters:
      - description: ユーザー情報
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterRequest'
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.SuccessBasicResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
      summary: ユーザー登録
      tags:
      - auth
  /api/auth/resetPass:
    put:
      description: メール内リンクから遷移できるパスワードリセット画面から、トークンと新しいパスワードをリクエストで取得し、パスワードを更新する
      parameters:
      - description: tokenと新しいパスワード
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.ResetPassRequest'
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.SuccessBasicResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "404":
          description: not foundエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
      summary: ログアウト状態からパスワードを変更
      tags:
      - auth
  /api/auth/updatePass/{userId}:
    put:
      description: 現在のパスワードと新しいパスワードをリクエストで取得し、現在のパスワードが合致したら、新しいパスワードに更新する
      parameters:
      - description: 現在のパスワードと新しいパスワード
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.UpdatePassRequestBody'
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.SuccessBasicResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "401":
          description: 認証エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "404":
          description: not foundエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
      security:
      - BearerAuth: []
      summary: ログイン状態からパスワードを変更
      tags:
      - auth
  /api/expedition/{expeditionId}:
    get:
      description: 遠征記録詳細情報を取得
      parameters:
      - description: expeditionId
        in: path
        name: expeditionId
        required: true
        type: integer
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.ApiResponse-expedition_GetExpeditionDetailResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "403":
          description: 認証エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "404":
          description: not foundエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
      security:
      - BearerAuth: []
      summary: idから遠征記録詳細を取得
      tags:
      - expedition
  /api/expedition/create:
    post:
      description: 遠征、出費、試合、訪れた施設の情報を保存する。
      parameters:
      - description: 遠征記録作成リクエスト
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/expedition.CreateExpeditionRequest'
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.SuccessBasicResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "403":
          description: 認証エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
      security:
      - BearerAuth: []
      summary: 遠征記録を作成
      tags:
      - expedition
  /api/expedition/delete/{expeditionId}:
    delete:
      description: 遠征記録とそれに関連する全てのデータ（画像、いいね、支払い、試合情報など）を削除する
      parameters:
      - description: 遠征記録ID
        in: path
        name: expeditionId
        required: true
        type: integer
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.SuccessBasicResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "403":
          description: 認証エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "404":
          description: 遠征記録が見つかりません
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
      security:
      - BearerAuth: []
      summary: 遠征記録を削除
      tags:
      - expedition
  /api/expedition/like/{expeditionId}:
    post:
      description: ユーザーが遠征記録にいいね済みならいいねを付ける。いいねしていなかったらいいねする
      parameters:
      - description: 遠征記録ID
        in: path
        name: expeditionId
        required: true
        type: integer
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.ApiResponse-expedition_LikeExpeditionResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "403":
          description: 認証エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "404":
          description: 遠征記録が見つかりません
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
      security:
      - BearerAuth: []
      summary: 遠征記録にいいね、いいね解除を行う
      tags:
      - expedition
  /api/expedition/list:
    get:
      consumes:
      - application/json
      description: ページネーション付きで遠征記録一覧を取得します<br>teamIdとsportIdを指定すると、そのチーム、スポーツの遠征記録一覧を取得します。指定しなければ全ての遠征記録一覧を取得します
      parameters:
      - description: ページ番号
        in: query
        minimum: 1
        name: page
        required: true
        type: integer
      - description: スポーツID
        in: query
        name: sportId
        type: integer
      - description: チームID
        in: query
        name: teamId
        type: integer
      - description: スタジアムID
        in: query
        name: stadiumId
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.ApiResponse-array_expedition_ExpeditionListResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "403":
          description: 認証エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "404":
          description: 遠征記録が見つかりません
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
      security:
      - BearerAuth: []
      summary: 遠征記録一覧を取得
      tags:
      - expedition
  /api/expedition/update/{expeditionId}:
    put:
      description: 遠征、出費、試合、訪れた施設の情報を更新する。<br>Payment, VisitedFacility, Game, GameScoreのdeleteにはidの配列ですが、ExpeditionImageのdeleteにはurlの配列をリクエストで渡してください
      parameters:
      - description: 遠征記録更新リクエスト
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/expedition.UpdateExpeditionRequestBody'
      - description: 遠征記録ID
        in: path
        name: expeditionId
        required: true
        type: integer
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.SuccessBasicResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "403":
          description: 認証エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "404":
          description: ユーザーが見つかりません
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
      security:
      - BearerAuth: []
      summary: 遠征記録を更新
      tags:
      - expedition
  /api/sample/helloWorld:
    get:
      description: Hello Worldを返すだけのAPIです。
      responses: {}
      summary: サンプルAPI
      tags:
      - sample
  /api/sample/protectedHelloWorld:
    get:
      description: ログイン済みじゃないと実行できない、Hello Worldを返すだけのAPIです。
      responses: {}
      security:
      - BearerAuth: []
      summary: サンプルAPI
      tags:
      - sample
  /api/stadium/{stadiumId}:
    get:
      description: 遠征記録は1ページ目（15件）だけ返し、2ページ目以降は別APIから返す<br>周辺施設は20件を上限としてランキング形式で返す
      parameters:
      - description: stadiumId
        in: path
        name: stadiumId
        required: true
        type: integer
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.ApiResponse-stadium_GetStadiumResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "401":
          description: 認証エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "404":
          description: not foundエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
      security:
      - BearerAuth: []
      summary: スタジアム情報、そのスタジアムの遠征記録、周辺施設を取得するAPI
      tags:
      - stadium
  /api/team/me:
    get:
      description: sport, leagueで入れ子になったteamを返却<br>認証後、ログイン済みのuserIdからfavoriteTeamsを取得し、isFavoriteにtrueかfalseを設定する
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.ApiResponse-array_team_SportResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
      security:
      - BearerAuth: []
      summary: クライアントで推しチームを選択する際に必要なチーム情報を取得するAPI
      tags:
      - team
  /api/team/public:
    get:
      description: sport, leagueで入れ子になったteamを返却<br>最初にお気に入りチームを追加する際は、認証していないため全てのisFavoriteをfalseにして返す
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.ApiResponse-array_team_SportResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
      summary: クライアントで推しチームを選択する際に必要なチーム情報を取得するAPI
      tags:
      - team
  /api/upload/images:
    post:
      consumes:
      - multipart/form-data
      description: 画像をアップロードし、URLを返します。<br>プロフィール、スタジアム、遠征など、格納フォルダを指定してください。<br>画像は1枚から10枚アップロードできるが、Swagger
        UIでは1つしか選択できません。<br>ファイルの拡張子は、[".jpg", ".jpeg", ".png"]だけを受け付けています。ファイルサイズは最大5MBを上限としています。
      parameters:
      - description: 格納フォルダ
        in: query
        name: folder
        required: true
        type: string
      - description: 画像ファイル
        in: formData
        name: images
        required: true
        type: file
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.ApiResponse-upload_UploadImagesResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "401":
          description: 認証エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "404":
          description: not foundエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
      summary: 画像をクラウドストレージ(imagekit)にアップロード
      tags:
      - upload
  /api/user/isUnique/{username}:
    get:
      description: リクエストと同じuserNameが登録済みかチェックする
      parameters:
      - description: username
        in: path
        name: username
        required: true
        type: string
      responses:
        "200":
          description: 一意かのフラグ
          schema:
            $ref: '#/definitions/utils.ApiResponse-user_IsUniqueUsernameResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
      summary: ユーザーネームの重複チェック
      tags:
      - user
  /api/user/logined:
    get:
      description: ヘッダーのトークンからロ図イン済みのユーザーを取得する
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/utils.ApiResponse-user_UserResponse'
        "401":
          description: 認証エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "404":
          description: not foundエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
      security:
      - BearerAuth: []
      summary: ログイン済みの場合、ログインユーザーの情報を取得
      tags:
      - user
  /api/user/update/{userId}:
    put:
      description: ユーザーの情報を変更する
      parameters:
      - description: 更新データ
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.UpdateUserRequestBody'
      responses:
        "200":
          description: ユーザー情報
          schema:
            $ref: '#/definitions/utils.ApiResponse-user_UserResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "401":
          description: 認証エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "404":
          description: not foundエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
      security:
      - BearerAuth: []
      summary: ユーザー情報変更
      tags:
      - user
  /api/user/userId/{userId}:
    get:
      description: userIdからユーザーを1人取得
      parameters:
      - description: userId
        in: path
        name: userId
        required: true
        type: integer
      responses:
        "200":
          description: ユーザー情報
          schema:
            $ref: '#/definitions/utils.ApiResponse-user_UserResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "401":
          description: 認証エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "404":
          description: not foundエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
      security:
      - BearerAuth: []
      summary: userIdからユーザー情報取得
      tags:
      - user
  /api/user/username/{username}:
    get:
      description: usernameからユーザーを1人取得
      parameters:
      - description: username
        in: path
        name: username
        required: true
        type: string
      responses:
        "200":
          description: ユーザー情報
          schema:
            $ref: '#/definitions/utils.ApiResponse-user_UserResponse'
        "400":
          description: リクエストエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "401":
          description: 認証エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "404":
          description: not foundエラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
        "500":
          description: 内部エラー
          schema:
            $ref: '#/definitions/utils.ErrorBasicResponse'
      security:
      - BearerAuth: []
      summary: usernameからユーザー情報取得
      tags:
      - user
produces:
- application/json
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
